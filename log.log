from __future__ import print_function

import functools
import inspect
import json
import logging

import requests


class MyHandler(logging.Handler):
    func_data = []
    project_unic = None

    def __init__(self):
        logging.Handler.__init__(self)
        self.args = None

    def emit(self, record):
        message = self.format(record)
        all_args = MyHandler.func_data
        project_id = MyHandler.project_unic
        split_record = record.exc_text.split('File')
        split_line = split_record[-1].split(',')
        file_code = split_line[0]
        path_replace = file_code.replace('\"', "")
        path_file = path_replace.replace(':', ':\\').strip()
        handle = open(path_file, "r")
        script_code = handle.read()
        handle.close()
        if not all_args:
            my_json = {
                "project_id": "" + project_id + "",
                "message": "" + message + "",
                "script_code": "" + script_code + "",
                "exist": 1
            }
        else:
            MyHandler.func_data = []
            name_function = all_args[0]
            args = all_args[1]
            kwargs = all_args[2]
            # print(type(args))
            # print(type(kwargs))
            # print(args)
            # print(kwargs)
            my_json = {"project_id": "" + project_id + "",
                       "script_code": "" + script_code + "",
                       "message": "" + message + "",
                       "exist": 0,
                       "name_function": "" + json.dumps(name_function) + "",
                       "args": "" + json.dumps(args, ensure_ascii=False) + "",
                       "kwargs": "" + json.dumps(kwargs) + ""
                       }
        # r = requests.post("https://lumerty.ru/api/send/message", json=my_json)
        r = requests.post("http://fdf5d9293937.ngrok.io/api/send/message", json=my_json)


candy_config = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'my_format': {
            'format': '{asctime} $ {levelname} $ {name} $ '
                      '{module}:{funcName}:{args}:{lineno} $ {message}',
            'datefmt': '%Y-%m-%d %H:%M:%S',
            'style': '{'
        }
    },
    'handlers': {
        'console': {
            '()': MyHandler,
            'level': 'ERROR',
            'formatter': 'my_format'},
        # 'file_handler': {
        #     '()': MyHandler,
        #     'level': 'ERROR',
        #     'filename': 'error.log',
        #     'formatter': 'my_format'
        # }
    },
    'loggers': {
        '': {
            # '()': Log,
            'level': 'DEBUG',
            'handlers': ['console']
            # 'propogate': False
        }
    }
    # 'filters': {},
    # 'root': {},
    # 'incremental': True
}


def project_key(id_project):
    MyHandler.project_unic = id_project
    return


def candy_wraps(*, entry=True, exit=True, level="ERROR"):
    def wrapper(super):
        name = super.__name__

        @functools.wraps(super)
        def wrapped(*args, **kwargs):
            # logger_ = logger.opt(depth=1)
            if entry:
                # logger_.log(level, "Entering '{}' (args={}, kwargs={})", name, args, kwargs)
                MyHandler.func_data = [name, args, kwargs]
            result = super(*args, **kwargs)
            if exit:
                print(result)
                # logger_.log(level, "Exiting '{}' (result={})", name, result)
            return result

        return wrapped

    return wrapper


@candy_wraps()
def error_func(s):
    return s/0